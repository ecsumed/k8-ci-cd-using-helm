#######################################################################################
# References
#######################################################################################
# https://docs.docker.com/ci-cd/github-actions/
# https://docs.docker.com/engine/scan/
#######################################################################################



#######################################################################################
# The general skelatal flow was referenced from here:
# https://www.magnolia-cms.com/blog/building-a-continuous-delivery-pipeline-with-github-and-helm-to-deploy-magnolia-to-kubernetes.html#chapter-13
#######################################################################################


name: Build and Publish

on:
 push:
   branches: [master]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: 'helm-ci-cd'

jobs:
 build-release-deploy:
   name: 'Build, Release and Deploy'
   runs-on: ubuntu-latest

   steps:

     - name: Check out code
       uses: actions/checkout@v2

     - name: Login to Docker Hub
       uses: docker/login-action@v1
       with:
         username: ${{ secrets.DOCKER_HUB_USERNAME }}
         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
     
     - name: Build image
       uses: docker/build-push-action@v2
       with:
         context: nginx-hello
         file: nginx-hello/Dockerfile
         push: false
         tags: ${{ env.IMAGE_NAME }}:latest
     
     - name: Install docker scan plugin
       run: |
         mkdir -p ~/.docker/cli-plugins
         curl https://github.com/docker/scan-cli-plugin/releases/latest/download/docker-scan_linux_amd64 -L -s -S -o ~/.docker/cli-plugins/docker-scan
         chmod +x ~/.docker/cli-plugins/docker-scan

     - name: Test image for vulnerabilities
       run: |
         docker scan --login --accept-license --token ${{ secrets.DOCKER_HUB_SNYK_TOKEN }}
         docker scan ${{ env.IMAGE_NAME }}

     #########################################################################################
     # We get the old release version before doing a release so that we can
     # verify that a new release has indeed taken place. This is important
     # because if a new release has not taken place, then we WANT to skip
     # all of the docker/helm push/release steps.
     #
     # The `antifree/json-to-variables` module exposes the entire json file as env variables.
     # which we need to compare versions (later on in the helm deploy stage)
     # Other solutions to do this were kind of messy imo.
     - name: Get Old Release Version
       uses: antifree/json-to-variables@v1.0.1
       with:
         filename: 'package.json'
         prefix: old_release

     - name: Setup node for semantic release
       uses: actions/setup-node@v2

     - name: Do Semantic Release
       run: npm install && npx semantic-release

     - name: Get New Release Version
       uses: antifree/json-to-variables@v1.0.1
       with:
         filename: 'package.json'
         prefix: new_release

     # This task was copied verbatim from here:
     # https://www.magnolia-cms.com/blog/building-a-continuous-delivery-pipeline-with-github-and-helm-to-deploy-magnolia-to-kubernetes.html#chapter-13
     - name: Helm Lint
       uses: WyriHaximus/github-action-helm3@v2
       with:
         exec: helm lint ./helm-chart



     #################################################################################################
     #################################################################################################
     # The following release and deploy steps should only occur if there is a new release!
     #################################################################################################
     #################################################################################################
     - name: Push Image
       if: env.old_release_version != env.new_release_version
       run: |
         docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
         docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.new_release_version }}
         docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }} --all-tags

     # This task was modified a bit to fit but was also copied from here:
     # https://www.magnolia-cms.com/blog/building-a-continuous-delivery-pipeline-with-github-and-helm-to-deploy-magnolia-to-kubernetes.html#chapter-13
     - name: Helm install
       if: env.old_release_version != env.new_release_version
       uses: WyriHaximus/github-action-helm3@v2
       with:
         exec: |
           helm upgrade --install ${{ env.IMAGE_NAME }} ./helm-chart \
             -f ./helm-chart/values.yaml \
             --set app.image.tag=${{ env.new_release_version }}
         kubeconfig: '${{ secrets.KUBECONFIG }}'
